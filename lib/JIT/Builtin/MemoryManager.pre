<?php

/*
 * This file is part of PHP-Compiler, a PHP CFG Compiler for PHP code
 *
 * @copyright 2015 Anthony Ferrara. All rights reserved
 * @license MIT See LICENSE at the root of the project for more info
 */

namespace PHPCompiler\JIT\Builtin;

use PHPCompiler\JIT\Builtin;
use PHPCompiler\JIT\Context;


use PHPLLVM;

abstract class MemoryManager extends Builtin {
    static public function load(Context $context, int $loadtype) : self {
        if ($loadtype === Builtin::LOAD_TYPE_STANDALONE) {
            return new MemoryManager\Native($context, $loadtype);
        }
        return new MemoryManager\PHP($context, $loadtype);
    }

    public function register(): void {
        declare {
            static inline function __mm__malloc(size_t): int8*;
            static inline function __mm__realloc(int8*, size_t): int8*;
            static inline function __mm__free(int8*): void;
        }
    }

    public function malloc(PHPLLVM\Type $type): PHPLLVM\Value {
        compile {
            $size = sizeof $type;
            $ptr = __mm__malloc($size);
        }
        return $this->context->builder->pointerCast($ptr, $type->pointerType(0));
    }

    public function mallocWithExtra(PHPLLVM\Type $type, PHPLLVM\Value $extra): PHPLLVM\Value {
        unsigned compile {
            $size = sizeof $type;
            $size = $size + $extra;
            $ptr = __mm__malloc($size);
        }
        return $this->context->builder->pointerCast($ptr, $type->pointerType(0));
    }

    public function realloc(PHPLLVM\Value $value, PHPLLVM\Value $extra): PHPLLVM\Value {
        $type = $value->typeOf()->getElementType();
        unsigned compile {
            $size = sizeof $type;
            $allocSize = $size + $extra;
            $void = (int8*) $value;
            $ptr = __mm__realloc($void, $allocSize);
        }
        return $this->context->builder->pointerCast($ptr, $type->pointerType(0));
    }

    public function free(PHPLLVM\Value $value): void {
        compile {
            $void = (int8*) $value;
            __mm__free($void);
        }
    }

}
